import React, { useState, useEffect } from 'react';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { Line } from 'react-chartjs-2';
//import faker from 'faker';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

export const options = {
  responsive: true,
  interaction: {
    mode: 'index',
    intersect: true,
  },
  stacked: false,
  plugins: {
    title: {
      display: true,
      text: 'Multi Axis Line Chart',
    },
  },
  scales: {
    y: {
      type: 'linear',
      display: true,
      position: 'left',
    },
    y1: {
      type: 'linear',
      display: true,
      position: 'right',
      grid: {
        drawOnChartArea: true,
      },
    },
  },
};

const labels = [
  'AFA',
  'ALL',
  'DZD',
  'AOA',
  'ARS',
  'AMD',
  'AWG',
  'AUD',
  'AZN',
  'BSD',
  'BHD',
  'BDT',
  'BBD',
  'BYR',
  'BEF',
  'BZD',
  'BMD',
  'BTN',
  'BTC',
  'BOB',
  'BAM',
  'BWP',
  'BRL',
  'GBP',
  'BND',
  'BGN',
  'BIF',
  'KHR',
  'CAD',
  'CVE',
  'KYD',
  'XOF',
  'XAF',
  'XPF',
  'CLP',
  'CNY',
  'COP',
  'KMF',
  'CDF',
  'CRC',
  'HRK',
  'CUC',
  'CZK',
  'DKK',
  'DJF',
  'DOP',
  'XCD',
  'EGP',
  'ERN',
  'EEK',
  'ETB',
  'EUR',
  'FKP',
  'FJD',
  'GMD',
  'GEL',
  'DEM',
  'GHS',
  'GIP',
  'GRD',
  'GTQ',
  'GNF',
  'GYD',
  'HTG',
  'HNL',
  'HKD',
  'HUF',
  'ISK',
  'INR',
  'IDR',
  'IRR',
  'IQD',
  'ILS',
  'ITL',
  'JMD',
  'JPY',
  'JOD',
  'KZT',
  'KES',
  'KWD',
  'KGS',
  'LAK',
  'LVL',
  'LBP',
  'LSL',
  'LRD',
  'LYD',
  'LTL',
  'MOP',
  'MKD',
  'MGA',
  'MWK',
  'MYR',
  'MVR',
  'MRO',
  'MUR',
  'MXN',
  'MDL',
  'MNT',
  'MAD',
  'MZM',
  'MMK',
  'NAD',
  'NPR',
  'ANG',
  'TWD',
  'NZD',
  'NIO',
  'NGN',
  'KPW',
  'NOK',
  'OMR',
  'PKR',
  'PAB',
  'PGK',
  'PYG',
  'PEN',
  'PHP',
  'PLN',
  'QAR',
  'RON',
  'RUB',
  'RWF',
  'SVC',
  'WST',
  'SAR',
  'RSD',
  'SCR',
  'SLL',
  'SGD',
  'SKK',
  'SBD',
  'SOS',
  'ZAR',
  'KRW',
  'XDR',
  'LKR',
  'SHP',
  'SDG',
  'SRD',
  'SZL',
  'SEK',
  'CHF',
  'SYP',
  'STD',
  'TJS',
  'TZS',
  'THB',
  'TOP',
  'TTD',
  'TND',
  'TRY',
  'TMT',
  'UGX',
  'UAH',
  'AED',
  'UYU',
  'USD',
  'UZS',
  'VUV',
  'VEF',
  'VND',
  'YER',
  'ZMK',
];

export const data = {
  labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: [0, 10, 20, 30, 50, 60, 70, 80],
      borderColor: 'rgb(255, 99, 132)',
      backgroundColor: 'rgba(255, 99, 132, 0.5)',
      yAxisID: 'y',
    },
    {
      label: 'Dataset 2',
      data: [50, [20], 22, 38, 85, 65, 45, 100],
      borderColor: 'rgb(53, 162, 235)',
      backgroundColor: 'rgba(53, 162, 235, 0.5)',
      yAxisID: 'y1',
    },
  ],
};

export function MultiAxisLineChart() {
  const [data1, setdata1] = useState([]);
  const [data2, setdata2] = useState([]);

  useEffect(() => {
    const interval = setInterval(() => {
      var d1 = [
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
      ];
      var d2 = [
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
        Math.random(100) * 10000,
      ];
      setdata1(d1);
      setdata2(d2);
      //console.log('This will run every second!');
    }, 1900);
    return () => clearInterval(interval);
  });
  return (
    <Line
      options={options}
      data={{
        labels,
        datasets: [
          {
            label: 'Dataset 1',
            data: data1,
            //data: [0, 10, 20, 30, 50, 60, 70, 80],
            borderColor: 'blue',
            backgroundColor: 'red',
            yAxisID: 'y',
          },
          /*{
            label: 'Dataset 2',
            data: data2,
            //data: [50, [20], 22, 38, 85, 65, 45, 100],
            borderColor: 'rgb(53, 162, 235)',
            backgroundColor: 'rgba(53, 162, 235, 0.5)',
            yAxisID: 'y1',
          },*/
        ],
      }}
    />
  );
}
